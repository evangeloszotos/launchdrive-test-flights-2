{
  "env": {
    "browser": true,
    "node": true
  },
  "plugins": ["react", "@typescript-eslint", "unicorn", "prettier"],
  "extends": [
    "next/core-web-vitals",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb",
    "airbnb/hooks",
    "prettier" // Add "prettier" last. This will turn off eslint rules conflicting with prettier. This is not what will format our code.
  ],
  "rules": {
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/member-delimiter-style": "error",
    "@typescript-eslint/method-signature-style": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-unused-vars": "error",
    //
    "react/forbid-prop-types": "off",
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react/hook-use-state": "error",
    "react/no-array-index-key": "warn",
    "react/no-multi-comp": "warn",
    "react/no-this-in-sfc": "error",
    "react/prefer-stateless-function": "error",
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "react/require-default-props": "off",
    "react/jsx-boolean-value": ["off", "always"],
    "react/jsx-filename-extension": [
      2,
      {
        "extensions": [".jsx", ".tsx"]
      }
    ],
    "react/jsx-props-no-spreading": "off",
    "react/jsx-pascal-case": "error",
    "react/jsx-space-before-closing": "warn",

    //
    "unicorn/no-array-for-each": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/empty-brace-spaces": "error",
    "unicorn/no-lonely-if": "error",
    "unicorn/no-instanceof-array": "error",
    "unicorn/prefer-array-find": "warn",
    "unicorn/prefer-array-some": "warn",
    "unicorn/prefer-includes": "warn",
    "react/jsx-tag-spacing": [
      "error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never",
        "beforeClosing": "never"
      }
    ],
    //
    "prettier/prettier": "off",
    //
    "curly": ["error", "multi-line"],
    "import/extensions": "off",
    "import/no-extraneous-dependencies": "off",
    "import/prefer-default-export": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "lines-between-class-members": ["error", "always", { "exceptAfterSingleLine": true }],
    "no-console": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ]
  },
  "globals": {
    "JSX": true
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  }
}

