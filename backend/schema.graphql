# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Profile {
  id: ID!
  name: String
  notes: String
  owner: User
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  status: String
}

input ProfileWhereUniqueInput {
  id: ID
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IDFilter
  name: StringFilter
  notes: StringFilter
  owner: UserWhereInput
  projects: ProjectManyRelationFilter
  status: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ProfileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  notes: OrderDirection
  status: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ProfileUpdateInput {
  name: String
  notes: String
  owner: UserRelateToOneForUpdateInput
  projects: ProjectRelateToManyForUpdateInput
  status: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProfileUpdateArgs {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateInput!
}

input ProfileCreateInput {
  name: String
  notes: String
  owner: UserRelateToOneForCreateInput
  projects: ProjectRelateToManyForCreateInput
  status: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type Project {
  id: ID!
  profile: Profile
  status: String
  title: String
  notes: String
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variantsCount(where: VariantWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  profile: ProfileWhereInput
  status: StringFilter
  title: StringFilter
  notes: StringFilter
  variants: VariantManyRelationFilter
}

input VariantManyRelationFilter {
  every: VariantWhereInput
  some: VariantWhereInput
  none: VariantWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  status: OrderDirection
  title: OrderDirection
  notes: OrderDirection
}

input ProjectUpdateInput {
  profile: ProfileRelateToOneForUpdateInput
  status: String
  title: String
  notes: String
  variants: VariantRelateToManyForUpdateInput
}

input ProfileRelateToOneForUpdateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
}

input VariantRelateToManyForUpdateInput {
  disconnect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  create: [VariantCreateInput!]
  connect: [VariantWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  profile: ProfileRelateToOneForCreateInput
  status: String
  title: String
  notes: String
  variants: VariantRelateToManyForCreateInput
}

input ProfileRelateToOneForCreateInput {
  create: ProfileCreateInput
  connect: ProfileWhereUniqueInput
}

input VariantRelateToManyForCreateInput {
  create: [VariantCreateInput!]
  connect: [VariantWhereUniqueInput!]
}

type Template {
  id: ID!
  title: String
  preview: S3File
}

type S3File {
  etag: ID
  filename: String
  folder: String
  bucket: String
  username: String
  secret: String
}

input TemplateWhereUniqueInput {
  id: ID
}

input TemplateWhereInput {
  AND: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  NOT: [TemplateWhereInput!]
  id: IDFilter
  title: StringFilter
}

input TemplateOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input TemplateUpdateInput {
  title: String
  preview: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TemplateUpdateArgs {
  where: TemplateWhereUniqueInput!
  data: TemplateUpdateInput!
}

input TemplateCreateInput {
  title: String
  preview: Upload
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  roles(
    where: UserRoleWhereInput! = {}
    orderBy: [UserRoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserRole!]
  rolesCount(where: UserRoleWhereInput! = {}): Int
  s3Secret: String
  profiles(
    where: ProfileWhereInput! = {}
    orderBy: [ProfileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Profile!]
  profilesCount(where: ProfileWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  roles: UserRoleManyRelationFilter
  s3Secret: StringFilter
  profiles: ProfileManyRelationFilter
}

input UserRoleManyRelationFilter {
  every: UserRoleWhereInput
  some: UserRoleWhereInput
  none: UserRoleWhereInput
}

input ProfileManyRelationFilter {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  s3Secret: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  roles: UserRoleRelateToManyForUpdateInput
  s3Secret: String
  profiles: ProfileRelateToManyForUpdateInput
}

input UserRoleRelateToManyForUpdateInput {
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input ProfileRelateToManyForUpdateInput {
  disconnect: [ProfileWhereUniqueInput!]
  set: [ProfileWhereUniqueInput!]
  create: [ProfileCreateInput!]
  connect: [ProfileWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  roles: UserRoleRelateToManyForCreateInput
  s3Secret: String
  profiles: ProfileRelateToManyForCreateInput
}

input UserRoleRelateToManyForCreateInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input ProfileRelateToManyForCreateInput {
  create: [ProfileCreateInput!]
  connect: [ProfileWhereUniqueInput!]
}

type UserRole {
  id: ID!
  name: String
}

input UserRoleWhereUniqueInput {
  id: ID
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  NOT: [UserRoleWhereInput!]
  id: IDFilter
  name: StringFilter
}

input UserRoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input UserRoleUpdateInput {
  name: String
}

input UserRoleUpdateArgs {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateInput!
}

input UserRoleCreateInput {
  name: String
}

type Variant {
  id: ID!
  project: Project
  template: Template
  status: String
  title: String
}

input VariantWhereUniqueInput {
  id: ID
}

input VariantWhereInput {
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  template: TemplateWhereInput
  status: StringFilter
  title: StringFilter
}

input VariantOrderByInput {
  id: OrderDirection
  status: OrderDirection
  title: OrderDirection
}

input VariantUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  template: TemplateRelateToOneForUpdateInput
  status: String
  title: String
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input TemplateRelateToOneForUpdateInput {
  create: TemplateCreateInput
  connect: TemplateWhereUniqueInput
  disconnect: Boolean
}

input VariantUpdateArgs {
  where: VariantWhereUniqueInput!
  data: VariantUpdateInput!
}

input VariantCreateInput {
  project: ProjectRelateToOneForCreateInput
  template: TemplateRelateToOneForCreateInput
  status: String
  title: String
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input TemplateRelateToOneForCreateInput {
  create: TemplateCreateInput
  connect: TemplateWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createProfile(data: ProfileCreateInput!): Profile
  createProfiles(data: [ProfileCreateInput!]!): [Profile]
  updateProfile(
    where: ProfileWhereUniqueInput!
    data: ProfileUpdateInput!
  ): Profile
  updateProfiles(data: [ProfileUpdateArgs!]!): [Profile]
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteProfiles(where: [ProfileWhereUniqueInput!]!): [Profile]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createTemplate(data: TemplateCreateInput!): Template
  createTemplates(data: [TemplateCreateInput!]!): [Template]
  updateTemplate(
    where: TemplateWhereUniqueInput!
    data: TemplateUpdateInput!
  ): Template
  updateTemplates(data: [TemplateUpdateArgs!]!): [Template]
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteTemplates(where: [TemplateWhereUniqueInput!]!): [Template]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserRole(data: UserRoleCreateInput!): UserRole
  createUserRoles(data: [UserRoleCreateInput!]!): [UserRole]
  updateUserRole(
    where: UserRoleWhereUniqueInput!
    data: UserRoleUpdateInput!
  ): UserRole
  updateUserRoles(data: [UserRoleUpdateArgs!]!): [UserRole]
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  deleteUserRoles(where: [UserRoleWhereUniqueInput!]!): [UserRole]
  createVariant(data: VariantCreateInput!): Variant
  createVariants(data: [VariantCreateInput!]!): [Variant]
  updateVariant(
    where: VariantWhereUniqueInput!
    data: VariantUpdateInput!
  ): Variant
  updateVariants(data: [VariantUpdateArgs!]!): [Variant]
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteVariants(where: [VariantWhereUniqueInput!]!): [Variant]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  profiles(
    where: ProfileWhereInput! = {}
    orderBy: [ProfileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Profile!]
  profile(where: ProfileWhereUniqueInput!): Profile
  profilesCount(where: ProfileWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  templates(
    where: TemplateWhereInput! = {}
    orderBy: [TemplateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Template!]
  template(where: TemplateWhereUniqueInput!): Template
  templatesCount(where: TemplateWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userRoles(
    where: UserRoleWhereInput! = {}
    orderBy: [UserRoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserRole!]
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRolesCount(where: UserRoleWhereInput! = {}): Int
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variant(where: VariantWhereUniqueInput!): Variant
  variantsCount(where: VariantWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
