# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  s3Secret: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  s3Secret: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  s3Secret: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  s3Secret: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  s3Secret: String
}

type FakeDoorTest {
  id: ID!
  name: String
}

input FakeDoorTestWhereUniqueInput {
  id: ID
}

input FakeDoorTestWhereInput {
  AND: [FakeDoorTestWhereInput!]
  OR: [FakeDoorTestWhereInput!]
  NOT: [FakeDoorTestWhereInput!]
  id: IDFilter
  name: StringFilter
}

input FakeDoorTestOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input FakeDoorTestUpdateInput {
  name: String
}

input FakeDoorTestUpdateArgs {
  where: FakeDoorTestWhereUniqueInput!
  data: FakeDoorTestUpdateInput!
}

input FakeDoorTestCreateInput {
  name: String
}

type Product {
  id: ID!
  name: String
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  comments: CommentManyRelationFilter
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProductUpdateInput {
  name: String
  comments: CommentRelateToManyForUpdateInput
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  comments: CommentRelateToManyForCreateInput
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Post {
  id: ID!
  name: String
  content: String
  viewsCount: Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  name: StringFilter
  content: StringFilter
  viewsCount: IntNullableFilter
  comments: CommentManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
  viewsCount: OrderDirection
}

input PostUpdateInput {
  name: String
  content: String
  viewsCount: Int
  comments: CommentRelateToManyForUpdateInput
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  name: String
  content: String
  viewsCount: Int
  comments: CommentRelateToManyForCreateInput
}

type Comment {
  id: ID!
  name: String
  content: String
  product: Product
  post: Post
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  name: StringFilter
  content: StringFilter
  product: ProductWhereInput
  post: PostWhereInput
}

input CommentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
}

input CommentUpdateInput {
  name: String
  content: String
  product: ProductRelateToOneForUpdateInput
  post: PostRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  name: String
  content: String
  product: ProductRelateToOneForCreateInput
  post: PostRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFakeDoorTest(data: FakeDoorTestCreateInput!): FakeDoorTest
  createFakeDoorTests(data: [FakeDoorTestCreateInput!]!): [FakeDoorTest]
  updateFakeDoorTest(
    where: FakeDoorTestWhereUniqueInput!
    data: FakeDoorTestUpdateInput!
  ): FakeDoorTest
  updateFakeDoorTests(data: [FakeDoorTestUpdateArgs!]!): [FakeDoorTest]
  deleteFakeDoorTest(where: FakeDoorTestWhereUniqueInput!): FakeDoorTest
  deleteFakeDoorTests(where: [FakeDoorTestWhereUniqueInput!]!): [FakeDoorTest]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  fakeDoorTests(
    where: FakeDoorTestWhereInput! = {}
    orderBy: [FakeDoorTestOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FakeDoorTest!]
  fakeDoorTest(where: FakeDoorTestWhereUniqueInput!): FakeDoorTest
  fakeDoorTestsCount(where: FakeDoorTestWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
