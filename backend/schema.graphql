# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  s3Secret: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  s3Secret: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  s3Secret: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  s3Secret: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  s3Secret: String
}

type TestFlight {
  id: ID!
  name: String
  variants(
    where: TestFlightVariantWhereInput! = {}
    orderBy: [TestFlightVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TestFlightVariant!]
  variantsCount(where: TestFlightVariantWhereInput! = {}): Int
}

input TestFlightWhereUniqueInput {
  id: ID
}

input TestFlightWhereInput {
  AND: [TestFlightWhereInput!]
  OR: [TestFlightWhereInput!]
  NOT: [TestFlightWhereInput!]
  id: IDFilter
  name: StringFilter
  variants: TestFlightVariantManyRelationFilter
}

input TestFlightVariantManyRelationFilter {
  every: TestFlightVariantWhereInput
  some: TestFlightVariantWhereInput
  none: TestFlightVariantWhereInput
}

input TestFlightOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TestFlightUpdateInput {
  name: String
  variants: TestFlightVariantRelateToManyForUpdateInput
}

input TestFlightVariantRelateToManyForUpdateInput {
  disconnect: [TestFlightVariantWhereUniqueInput!]
  set: [TestFlightVariantWhereUniqueInput!]
  create: [TestFlightVariantCreateInput!]
  connect: [TestFlightVariantWhereUniqueInput!]
}

input TestFlightUpdateArgs {
  where: TestFlightWhereUniqueInput!
  data: TestFlightUpdateInput!
}

input TestFlightCreateInput {
  name: String
  variants: TestFlightVariantRelateToManyForCreateInput
}

input TestFlightVariantRelateToManyForCreateInput {
  create: [TestFlightVariantCreateInput!]
  connect: [TestFlightVariantWhereUniqueInput!]
}

type TestFlightVariant {
  id: ID!
  name: String
  testFlight: TestFlight
}

input TestFlightVariantWhereUniqueInput {
  id: ID
}

input TestFlightVariantWhereInput {
  AND: [TestFlightVariantWhereInput!]
  OR: [TestFlightVariantWhereInput!]
  NOT: [TestFlightVariantWhereInput!]
  id: IDFilter
  name: StringFilter
  testFlight: TestFlightWhereInput
}

input TestFlightVariantOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TestFlightVariantUpdateInput {
  name: String
  testFlight: TestFlightRelateToOneForUpdateInput
}

input TestFlightRelateToOneForUpdateInput {
  create: TestFlightCreateInput
  connect: TestFlightWhereUniqueInput
  disconnect: Boolean
}

input TestFlightVariantUpdateArgs {
  where: TestFlightVariantWhereUniqueInput!
  data: TestFlightVariantUpdateInput!
}

input TestFlightVariantCreateInput {
  name: String
  testFlight: TestFlightRelateToOneForCreateInput
}

input TestFlightRelateToOneForCreateInput {
  create: TestFlightCreateInput
  connect: TestFlightWhereUniqueInput
}

type TextInput {
  id: ID!
  variant: TestFlightVariant
  inputFieldId: String
  value: String
}

input TextInputWhereUniqueInput {
  id: ID
}

input TextInputWhereInput {
  AND: [TextInputWhereInput!]
  OR: [TextInputWhereInput!]
  NOT: [TextInputWhereInput!]
  id: IDFilter
  variant: TestFlightVariantWhereInput
  inputFieldId: StringFilter
  value: StringFilter
}

input TextInputOrderByInput {
  id: OrderDirection
  inputFieldId: OrderDirection
  value: OrderDirection
}

input TextInputUpdateInput {
  variant: TestFlightVariantRelateToOneForUpdateInput
  inputFieldId: String
  value: String
}

input TestFlightVariantRelateToOneForUpdateInput {
  create: TestFlightVariantCreateInput
  connect: TestFlightVariantWhereUniqueInput
  disconnect: Boolean
}

input TextInputUpdateArgs {
  where: TextInputWhereUniqueInput!
  data: TextInputUpdateInput!
}

input TextInputCreateInput {
  variant: TestFlightVariantRelateToOneForCreateInput
  inputFieldId: String
  value: String
}

input TestFlightVariantRelateToOneForCreateInput {
  create: TestFlightVariantCreateInput
  connect: TestFlightVariantWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTestFlight(data: TestFlightCreateInput!): TestFlight
  createTestFlights(data: [TestFlightCreateInput!]!): [TestFlight]
  updateTestFlight(
    where: TestFlightWhereUniqueInput!
    data: TestFlightUpdateInput!
  ): TestFlight
  updateTestFlights(data: [TestFlightUpdateArgs!]!): [TestFlight]
  deleteTestFlight(where: TestFlightWhereUniqueInput!): TestFlight
  deleteTestFlights(where: [TestFlightWhereUniqueInput!]!): [TestFlight]
  createTestFlightVariant(
    data: TestFlightVariantCreateInput!
  ): TestFlightVariant
  createTestFlightVariants(
    data: [TestFlightVariantCreateInput!]!
  ): [TestFlightVariant]
  updateTestFlightVariant(
    where: TestFlightVariantWhereUniqueInput!
    data: TestFlightVariantUpdateInput!
  ): TestFlightVariant
  updateTestFlightVariants(
    data: [TestFlightVariantUpdateArgs!]!
  ): [TestFlightVariant]
  deleteTestFlightVariant(
    where: TestFlightVariantWhereUniqueInput!
  ): TestFlightVariant
  deleteTestFlightVariants(
    where: [TestFlightVariantWhereUniqueInput!]!
  ): [TestFlightVariant]
  createTextInput(data: TextInputCreateInput!): TextInput
  createTextInputs(data: [TextInputCreateInput!]!): [TextInput]
  updateTextInput(
    where: TextInputWhereUniqueInput!
    data: TextInputUpdateInput!
  ): TextInput
  updateTextInputs(data: [TextInputUpdateArgs!]!): [TextInput]
  deleteTextInput(where: TextInputWhereUniqueInput!): TextInput
  deleteTextInputs(where: [TextInputWhereUniqueInput!]!): [TextInput]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  testFlights(
    where: TestFlightWhereInput! = {}
    orderBy: [TestFlightOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TestFlight!]
  testFlight(where: TestFlightWhereUniqueInput!): TestFlight
  testFlightsCount(where: TestFlightWhereInput! = {}): Int
  testFlightVariants(
    where: TestFlightVariantWhereInput! = {}
    orderBy: [TestFlightVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TestFlightVariant!]
  testFlightVariant(
    where: TestFlightVariantWhereUniqueInput!
  ): TestFlightVariant
  testFlightVariantsCount(where: TestFlightVariantWhereInput! = {}): Int
  textInputs(
    where: TextInputWhereInput! = {}
    orderBy: [TextInputOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TextInput!]
  textInput(where: TextInputWhereUniqueInput!): TextInput
  textInputsCount(where: TextInputWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
